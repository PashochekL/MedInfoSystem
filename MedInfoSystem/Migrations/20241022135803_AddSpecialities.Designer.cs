// <auto-generated />
using System;
using MedInfoSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedInfoSystem.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20241022135803_AddSpecialities")]
    partial class AddSpecialities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConsultationId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Consultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CommentsNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InspectionId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Inspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("BaseInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Conclusion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PreviousInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35ed9da3-b212-4ef9-9e0a-44811be770ec"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8446),
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = new Guid("7de43cb8-b34a-4455-9cf6-b2d54f40597d"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8450),
                            Name = "Анестезиолог-реаниматолог"
                        },
                        new
                        {
                            Id = new Guid("851e66ed-e55a-4e0f-b855-1f0bf7f16ad4"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8452),
                            Name = "Дерматовенеролог"
                        },
                        new
                        {
                            Id = new Guid("00261b73-461b-4301-b343-e9e755385ecd"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8454),
                            Name = "Инфекционист"
                        },
                        new
                        {
                            Id = new Guid("a769f80d-9385-4a78-b189-5b565d54c82b"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8456),
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = new Guid("d5a52689-999c-46ae-a413-2b838b907c75"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8458),
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = new Guid("eee10541-6d2b-4afe-9ba5-175225614561"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8460),
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = new Guid("d0da12fb-2bb4-417b-b1ba-eb7d7da45ce0"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8476),
                            Name = "Ортопед"
                        },
                        new
                        {
                            Id = new Guid("77f422b7-fe13-4653-8dcb-1b4ddbbe5fd5"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8477),
                            Name = "Педиатр"
                        },
                        new
                        {
                            Id = new Guid("57163c84-11be-4a05-9313-ea583f4a1de3"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8479),
                            Name = "Ревматолог"
                        },
                        new
                        {
                            Id = new Guid("533a4457-cb20-45ee-881a-98eb43a32b54"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8480),
                            Name = "Стоматолог"
                        },
                        new
                        {
                            Id = new Guid("78dfe648-3829-48b3-9c76-d0b0987647e8"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8482),
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = new Guid("3749e7e9-0255-4b76-ad60-5a9c6e4cdeea"),
                            CreateTime = new DateTime(2024, 10, 22, 13, 58, 3, 393, DateTimeKind.Utc).AddTicks(8483),
                            Name = "Эндокринолог"
                        });
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Comment", b =>
                {
                    b.HasOne("MedInfoSystem.Data.Entities.Doctor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedInfoSystem.Data.Entities.Consultation", null)
                        .WithMany("RootComment")
                        .HasForeignKey("ConsultationId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Consultation", b =>
                {
                    b.HasOne("MedInfoSystem.Data.Entities.Inspection", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedInfoSystem.Data.Entities.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Diagnosis", b =>
                {
                    b.HasOne("MedInfoSystem.Data.Entities.Inspection", "Inspection")
                        .WithMany()
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Doctor", b =>
                {
                    b.HasOne("MedInfoSystem.Data.Entities.Speciality", "speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("speciality");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Inspection", b =>
                {
                    b.HasOne("MedInfoSystem.Data.Entities.Doctor", "Doctor")
                        .WithMany("Inspection")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedInfoSystem.Data.Entities.Patient", "Patient")
                        .WithMany("Inspection")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Consultation", b =>
                {
                    b.Navigation("RootComment");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Doctor", b =>
                {
                    b.Navigation("Inspection");
                });

            modelBuilder.Entity("MedInfoSystem.Data.Entities.Patient", b =>
                {
                    b.Navigation("Inspection");
                });
#pragma warning restore 612, 618
        }
    }
}
